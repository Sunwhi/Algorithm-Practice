<성공!>

#include <iostream>
#include <vector>

using namespace std;
// 퍼즐의 4가지 형태
const int bdx[4] = {-1,1,1,-1};
const int bdy[4] = {-1,-1,1,1};

bool checkFinish(bool board[][20], int h, int w){
	for(int i=0; i<h; i++){
		for(int j=0; j<w; j++){
			if(!board[i][j]) return false;  //흰색 칸이 남아있다면 false
		}
	}
	//cout << "true" << endl;
	return true;
}

// curW는 01234...19 w는 1234....20
int coverWhite(bool board[][20], int h, int w, int curH, int curW){
	int ret =0;
	
	if(checkFinish(board,h,w)) return 1;  //모든 칸이 검정색으로 칠해져 있나요? -> 모든 칸을 채울 수 있다.
	if(curH == h) return 0;  // 아니라면 마지막까지 확인했나요? -> 모든 칸을 채울 수 없다.
	
	if((curH>=1) && (!board[curH-1][curW])){ // 만약 바로 위칸이 흰색이라면 1번과 2번 조각만을 비교한다.
		
		if(board[curH][curW]) return 0; //만약 현재 칸이 검은색이라면 바로 FAIL
		
		for(int i=0; i<2; i++){
			if( ( ( (curW + bdx[i])<0) || (w<=(curW + bdx[i]) ) ) || ( board[curH][curW + bdx[i]] ) ) continue; // 위에서 h값은 비교했으므로 w값만 비교한다.
			board[curH + bdy[i]][curW] = true;
			board[curH][curW + bdx[i]] = true;
			board[curH][curW] = true;
		
			if(curW == w-1) ret += coverWhite(board,h,w,curH + 1,0);
			else ret += coverWhite(board,h,w,curH,curW + 1);
		
		
			board[curH + bdy[i]][curW] = false;
			board[curH][curW + bdx[i]] = false;
			board[curH][curW] = false;
		}
		return ret;
	}
	// 바로 위칸이 검은색일 경우 나머지 두 블록에 대해서 정상적으로 비교를 진행한다.
	else{
		if((board[curH][curW])) { // 현재 칸이 검은 색일 경우
			if(curW == w-1) return coverWhite(board,h,w,curH + 1,0);
			else return coverWhite(board,h,w,curH,curW + 1);
		}
	
	// 현재 칸이 흰색이라면, 맞는 조각이 있는지 검사한다.
		for(int i=2; i<4; i++){
			if( (((curH + bdy[i])<0) || (h<=(curH + bdy[i]))) || (board[curH + bdy[i]][curW]) ) continue;  // 조각의 y를 붙인 곳이 보드의 범위를 벗어나거나 해당 칸이 검정색이라면
			if( (((curW + bdx[i])<0) || (w<=(curW + bdx[i]))) || (board[curH][curW + bdx[i]]) ) continue;  // 조각의 x를 붙인 곳이 보드의 범위를 벗어나거나 해당 칸이 검정색이라면
		
		//퍼즐의 i+1번째 형태가 맞춰진다면
			board[curH + bdy[i]][curW] = true;
			board[curH][curW + bdx[i]] = true;
			board[curH][curW] = true;
		
			if(curW == w-1) ret += coverWhite(board,h,w,curH + 1,0);
			else ret += coverWhite(board,h,w,curH,curW + 1);
		
		
			board[curH + bdy[i]][curW] = false;
			board[curH][curW + bdx[i]] = false;
			board[curH][curW] = false;
		
			//if (i == 3) return ret;
		}
	
		//맞는 조각이 없다. 혹은 조각을 뺀 상태로 경우의 수 계산. 후자의 경우 합산하여 반환해야 하기 때문에 return x (아닌듯))
		if(curW == w-1) ret += coverWhite(board,h,w,curH + 1,0);
		else ret += coverWhite(board,h,w,curH,curW + 1);
	
		return ret;
	}
	
}

int main(){
	int c;
	cin >> c;
	for(int i=0; i<c; i++){
		int h,w;
		cin >> h >> w;
		bool board[20][20]= {0,};
		for(int j=0; j<h; j++){
			for(int k=0; k<w; k++){
				char bw;
				cin >> bw;
				if(bw == '#') board[j][k] = true;  // 검은색이면 true, 흰색이면 false
				else board[j][k] = false;
			}
		}
		
		cout << coverWhite(board,h,w,0,0) << endl;
		
	}
	return 0;
}
