<뇌절 포기>
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>

using namespace std;

// 분할정복으로 mem에 M혹은 F이 n번째 인덱스에 존재하는지 탐색
int findNum(vector<int>& memM, int first, int end, int n)
{
	int mid = (first + end) / 2;
	// 기저사례
	if(memM[mid] == n) return 1;
	if(end == first) return 0;
	if(end == first + 1) return 0;
	
	if(memM[mid] > n) return findNum(memM, first, mid, n);
	else return findNum(memM, mid, end, n);
}
int nextNumIdx(vector<int>& fanM, int first, int end, int n)
{
	int mid = (first + end) / 2;
	if(end = first + 1) return end;
	if(fanM[mid] > n) return nextNumIdx(fanM, first, mid, n);
	else return nextNumIdx(fanM, mid, end, n);
}




int FanMeetingM(string& mem, string& fan, vector<int>& memM)
{
	//멤버가 전부 다 F일때
	if(memM.empty()) return fan.length() - mem.length() + 1;
	
	 vector<int> finalM; // 마지막 개수 세기 위한 
	int ret = 0;
	// fan에서 M과 F의 위치를 저장, 이때 mem의 가장 첫번째 M을 기점으로 위치를 센다.
	int mFirstM = memM[0]; // mem에서 가장 먼저 나오는 M의 인덱스 , 기준이다.
	vector<int> fanM;
	vector<int> fanF;
	for(int i=mFirstM; i<fan.length(); i++) // 고민
	{
		int val = i-mFirstM;
		if(fan[i] == 'M') fanM.push_back(val), finalM.push_back(val);	
		else fanF.push_back(val);
	}
	
	// 팬이 전부 다 F일때
	if(fanM.empty()) return fan.length() - mem.length() + 1;
	
	//memM의 인덱스들을 기준에 맞춘다.
	for(int i=0; i<memM.size(); i++)
	{
		memM[i] -= mFirstM;
	}
	for(int i=0; i<fanF.size(); i++)
	{
		int blankM = fanF[i];
		int start = nextNumIdx(fanM, 0, fanM.size()-1, blankM);
		if(fanF[i] > (fan.length() - mem.length() + mFirstM)) break; // 한계 넘어가는 숫자부터 컷
		
		for(int j=start; j<fanM.size(); j++)
		{
			if(findNum(memM,0,mem.length()-1,fanM[j]-blankM)) 
			{
				finalM.push_back(blankM);
				break;
			}
		}
	}
	
	
	ret = fan.length() - mem.length() + 1; // 전부 짝 짓는 모든 경우의 수(포옹 여부 x)
	int minus = finalM.size();
	for(int i=0; i<finalM.size(); i++)
	{
		if(finalM[i] > fan.length() - mem.length() - mFirstM) --minus;
	}
	ret -= minus;
	return ret;
}
/*int FanMeetingF(string& mem, string& fan, vector<int>& memF)
{
	
}*/
int main()
{
	int c;
	cin >> c;
	for(int i=0; i<c; i++)
	{
		int result = 0;
		string mem;
		string fan;
		cin >> mem;
		cin >> fan;

		//mem에서 M와 F의 위치를 저장
		vector<int> memM;
		vector<int> memF;
		
		for(int j=0; j<mem.length(); j++)
		{
			if(mem[j] == 'M') memM.push_back(j);
			else memF.push_back(j);
		}

		
		result = FanMeetingM(mem,fan,memM);
		//if(fanMNum >= fanFNum) result = FanMeetingM(mem,fan,memM);
		//else result = FanMeetingF();
		if(result<0) result = 0;
		cout << result << endl;
	}
	
}

<책 풀이 but 시간초과> , <일반적인 카라츠바 앍고리즘>
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <cmath>

using namespace std;
// 모든 vector는 숫자를 1230 -> {0 3 2 1}의 형태로 저장한다.

vector<int> multiply(vector<int>& a, vector<int>& b)
{
	vector<int> c(a.size() + b.size() + 1, 0);
	for(int i=0; i<a.size(); ++i)
		for(int j=0; j<b.size(); ++j)
			c[i+j] += a[i] * b[j];
	return c;
}
//a += b*(10^k)를 구현한다. 
void addTo(vector<int>& a, vector<int>& b, int k)
{
	if(a.size() <= b.size())
	{
		for(int i=0; i<b.size()-a.size(); i++)
			a.push_back(0);
	}
	else
	{
		for(int i=0; i<a.size()-b.size(); i++)
			b.push_back(0);
	}
	a.push_back(0);
	
	//b에 10의 k승을 곱한다
	for(int i=0; i<k; i++)
	{
		b.insert(b.begin(),0);
	}
	
	for(int i=k; i<b.size(); i++)
	{
		a[i] += b[i];
		int temp = a[i];
		if(a[i] > 9) a[i] = temp%10, a[i+1] += temp/10;
	}
	
	if(a[a.back()] == 0) a.pop_back();
}
// a -= b를 구현한다. a>=b
// a 뒤에 0붙어있음 주의
void subFrom(vector<int>& a, vector<int>& b)
{
	// newB에 000123과 같이 복사
	/*vector<int> newB(a.size());
	for(int i=0; i<a.size(); i++)
	{
		if(i<b.size()-a.size()) newB.push_back(0);
		else newB.push_back(b.size() - i + 1);
	}*/
	for(int i=0; i<a.size()-b.size(); i++)
		b.push_back(0);
	
	for(int i=0; i<a.size(); i++)
	{
		if(a[i]>=b[i]) a[i] -= b[i];
		else
		{
			int n = a[i]-b[i];
			a[i] = 10 + n;
			a[i+1] -= 1;
		}
	}
	
	for(int i=0; i<a.size()-b.size(); i++)
		b.pop_back();
}
vector<int> karatsuba(vector<int>& a, vector<int>& b)
{
	int an = a.size(), bn = b.size();
	if(an<bn) return karatsuba(b,a);
	if(an==0 || bn==0) return vector<int>();
	if(an<=100) return multiply(a,b);
	int half = an/2;
	
	vector<int> a0(a.begin(), a.begin() + half);
	vector<int> a1(a.begin() + half, a.end());
	vector<int> b0(b.begin(), b.begin() + min<int>(b.size(),half));
	vector<int> b1(b.begin() + min<int>(b.size(), half), b.end());
	
	vector<int> z2 = karatsuba(a1,b1);
	vector<int> z0 = karatsuba(a0,b0);
	addTo(a0,a1,0); addTo(b0,b1,0);
	vector<int> z1 = karatsuba(a0,b0);
	subFrom(z1,z0);
	subFrom(z1,z2);
	
	vector<int> ret;
	addTo(ret, z0, 0);
	addTo(ret, z1, half);
	addTo(ret, z2, half + half);
	return ret;
}

int hugs(const string& members, const string& fans)
{
	int N = members.size(), M = fans.size();
	vector<int> A(N), B(M);
	for(int i=0; i<N; ++i) A[i] = (members[i] == 'M');
	for(int i=0; i<M; ++i) B[M-1-i] = (fans[i] == 'M');
	
	vector<int> C = karatsuba(A,B);
	int allHugs = 0;
	for(int i=N-1; i<M; ++i)
		if(C[i] == 0)
			++allHugs;
	return allHugs;
}

int main()
{
	int c;
	cin >> c;
	for(int i=0; i<c; i++)
	{
		string members;
		string fans;
		cin >> members;
		cin >> fans;

		int answ = hugs(members, fans);
		cout << answ << endl;
	}
	
}
