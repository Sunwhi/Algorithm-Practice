<성공>
#include <iostream>
#include <vector>

using namespace std;


//a를 matchList에서 찾아냄.
bool searchA(vector<int> &matchList, int a){
	for(int i=0; i<matchList.size(); i++){
		if(matchList[i] == a) return true;
	}
	return false;
}

int findPair(vector<int> &numList, bool pair[][10], vector<int> &matchList, int startNum, int n, int pairCount, int* ret){
	//cout << *ret << endl;
	if(matchList.size() == n) {
		//cout << "완성된 짝입니다." << endl;
		//cout << "완성된 size" << matchList.size() << endl;
		//for(int i=0; i<n; i++) cout << matchList[i] << endl;
		return 1;
	}
	if(startNum == n-1) return 0;
	
	//이 줄까지 왔다는 것은 마지막 경우의 수가 아니라는 뜻
	if(searchA(matchList, startNum)){
		return findPair(numList, pair, matchList, startNum + 1, n, pairCount, ret); ///
		//return *ret;
	} //startNum이 matchList에 존재하는 경우
	
	for(int i=(startNum + 1); i<n; i++){
		
		if(pair[startNum][i]){
			if(searchA(matchList, i)) continue; // i가 matchList에 존재하는 경우
			
			matchList.push_back(startNum);
			matchList.push_back(i);
			//cout << "push_back" << startNum << ' ' << i << endl;
			//for(int i=0; i<n; i++) cout << matchList[i] << endl;
			*ret += findPair(numList, pair, matchList, startNum + 1, n, ++pairCount, ret); ///
			
			//cout << "back" << matchList.back();
			matchList.pop_back();
			matchList.pop_back();
			//cout << "size" <<  matchList.size() << endl;
			//cout << "pop_back" << startNum << ' ' << i << endl;
			//for(int i=0; i<n; i++) cout << matchList[i] << endl;
		}

		
	}
	//이 줄까지 왔다는 것은 i의 비교범위가 넘어섰다 = 경우의 수 끝
	return 0;
	//return findPair(numList, pair, matchList, ++startNum, n, pairCount, ret);
}
int main(){
	
	int testCase;
	int n,m;
	
	cin >> testCase;
	
	for(int k = 0; k < testCase; k++){
		
		cin >> n >> m;
		
		bool pair[10][10] = {0,};
		//pair 배열에 짝 기록하기 / 행 숫자 < 열 숫자
		for(int i=0; i<m; i++){
			int a,b;
			cin >> a >> b;
			if(a<b) pair[a][b] = true;
			else pair[b][a] = true;
		}
		
		int ret = 0;
		vector<int> matchList;
		vector<int> numList;
		for(int i=0; i<n; i++) numList.push_back(i);
		
		findPair(numList, pair, matchList, 0, n, 0, &ret);
		
		cout << ret << endl;
	}
	
	
}


<실패작1>

#include <iostream>
#include <vector>
using namespace std;

bool includePair(int pairNum, int n, int m, vector<int> currentPair, vector<vector<int>> arr);
	
	
int main(){
	
	int testCase;
	int n,m;
	vector<vector<int>> arr;
	
	cin >> testCase;
	cin >> n >> m;
	for(int k = 0; k < testCase; k++){
		
		int retNum = 0;
		
		for(int i = 0; i < m; i++){
			for(int j = 0; j < 2; j++){
				cin >> arr[i][j]; 
			}
		}
		
		for(int p = 0; p < m - n/2 + 1; p++){
			
			vector<int> currentPair;
			
			if(includePair(p, n, m, currentPair, arr)) retNum++;
			
		}
		
		cout << retNum;
		
	}
	
	
	
}
// 이 쌍이 포함될 수 있는가? pairNum : 판정할 쌍 / currentPair : 현재 조편성(기본값을 -1로 설정) 
bool includePair(int pairNum, int n, int m, vector<int> currentPair, vector<vector<int>> arr){
	
	if(pairNum == m) return false; // <기저사례> 만약 판정할 쌍이 m과 같아진다면 결국 조편성을 짜지 못한 것이므로 false 반환. 조편성이 끝났다면 여기까지 오지 않음.
	
	// 이 쌍이 포함될 수 있는가?
	for(int i = 0; i < 2; i++){
		for(int j = 0; j < currentPair.size(); j++){
			if(arr[pairNum][i] == currentPair[j]) return includePair(pairNum++, n, m, currentPair, arr); // 중복되는 숫자가 있으면 다음 pairNum 비교
		}
	}
	// 포함 될 수 있다. 새로운 쌍을 추가
	for(int i = 0; i < 2; i++){
		currentPair.push_back(arr[pairNum][i]);
	}
	
	if(currentPair.size() == n) return true; // <기저사례> 조편성을 끝냈다면 true 반환.
	
	includePair(pairNum++, n, m, currentPair, arr);
	
}

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
<실패작2>

#include <iostream>
#include <vector>

using namespace std;

bool includePair(int originP, int pairNum, int n, int m, vector<int> currentPair, vector<vector<int>> arr);
	
	
int main(){
	
	int testCase;
	int n,m;
	
	cin >> testCase;
	
	for(int k = 0; k < testCase; k++){
		
		cin >> n >> m;
		
		vector<vector<int>> arr;
		int arrInput = 0;
		int retNum = 0;
		
		// arr에 값 집어넣기 / 2차원 vector라서 arr에 값을 넣으려면 1차원 vector를 한번 거쳐야 함.
		for(int i = 0; i < m; i++){
			
			vector<int> arrRow{};
			
			for(int j = 0; j < 2; j++){
				
				cin >> arrInput;
				
				arrRow.push_back(arrInput);
				
			}
			
			arr.push_back(arrRow);
		}
		
		for(int p = 0; p <= m - n/2; p++){ // pairNum하나당 하나의 조합만 있는게 아니다! 
			
			vector<int> currentPair;
			
			if(includePair(p, p, n, m, currentPair, arr)){
				retNum++;
				cout << p;
			} 
			
		}
		
		
		cout << endl << retNum << endl;
		
	}
	
	
	
}
// 이 쌍이 포함될 수 있는가? pairNum : 판정할 쌍 / currentPair : 현재 조편성
bool includePair(int originP, int pairNum, int n, int m, vector<int> currentPair, vector<vector<int>> arr){
	
	if(currentPair.size() == n) return true; // <기저사례> 조편성을 끝냈다면 true 반환.
	if(pairNum == m) return false; // <기저사례> 만약 판정할 쌍이 m과 같아진다면 결국 조편성을 짜지 못한 것이므로 false 반환. 조편성이 끝났다면 여기까지 오지 않음.
	
	// 이 쌍이 포함될 수 없다.
	for(int i = 0; i < 2; i++){
		for(int j = 0; j < currentPair.size(); j++){
			if(arr[pairNum][i] == currentPair[j]) return includePair(originP, ++pairNum, n, m, currentPair, arr); // 포함되지 않는다면.
		}
	}
	
	// 포함 될 수 있다. 새로운 쌍을 추가, 첫번째 쌍은 무조건 여기로 옴
	for(int i = 0; i < 2; i++){
		currentPair.push_back(arr[pairNum][i]);
	}
	
	if(includePair(originP, originP + 1, n, m, currentPair, arr)) return true;
	
	return false;
}
